"""
Задача №9
Дано целое, неотрицательное n
Вычислите n! (с циклом while, 0!=1)

print('Введите n:')
n = int(input())
result = 1
count = 1
while count <= n:
    result *= count
    count += 1
print(result)

Задача11
Дано натуральное число A > 1 определить каким по счёту числом Фибоначчи оно является.
То есть найдите число n при котором F(n) = A. Если А не число Фибоначчи - выведите -1.
F = 0 1 1 2 3 5 8 ...
напр:
input 5
output 6

print('Введите A:')
A = int(input())
number = 2
fib_p, fib_n = 0, 1
while fib_n < A:
    fib_p, fib_n = fib_n, fib_p + fib_n
    number += 1
#if A == fib_n:
#    print(number)
#else:
#    print(-1)

print(number if A == fib_n else -1)
"""

"""
Задача №13:
Уставшие от необычно теплой зимы, жители решили узнать,
действительно ли это самая длинная оттепель за всю историю
наблюдений за погодой. Они обратились к синоптикам, а те, в
свою очередь, занялись исследованиями статистики за
прошлые годы. Их интересует, сколько дней длилась самая
длинная оттепель. Оттепелью они называют период, в
который среднесуточная температура ежедневно превышала
0 градусов Цельсия. Напишите программу, помогающую
синоптикам в работе.
Пользователь вводит число N – общее количество
рассматриваемых дней (1 ≤ N ≤ 100). В следующих строках
располагается N целых чисел.
Каждое число – среднесуточная температура в
соответствующий день. Температуры – целые числа и лежат в
диапазоне от –50 до 50
Input: 6 -> -20 30 -40 50 10 -10
Output: 2
"""

#print('Введите количество дней:')
#N = int(input())
#count = 1
#number = 0
#while count <= N:
#    print(f'Введите температуру {count} дня:')
#    term = int(input())
#    if term > 0:
#        number += 1
#    count += 1
#print(f'Тёплых дней {number}')

#terms = input('Введите значения температур через пробел:').split()
#length = 0
#max_length = 0
#for elem in terms:
#    elem = int(elem)
#    if  elem > 0:
#        length += 1
#    else:
#        length = 0
#    if length > max_length:
#        max_length = length
#print(max_length)

"""
Задача №15. Решение в группах
15. Иван Васильевич пришел на рынок и решил
купить два арбуза: один для себя, а другой для тещи.
Понятно, что для себя нужно выбрать арбуз
потяжелей, а для тещи полегче. Но вот незадача:
арбузов слишком много и он не знает как же выбрать
самый легкий и самый тяжелый арбуз? Помогите ему!
Пользователь вводит одно число N – количество
арбузов. Вторая строка содержит N чисел,
записанных на новой строчке каждое. Здесь каждое
число – это масса соответствующего арбуза
Input: 5 -> 5 1 6 5 9
Output: 1 9
"""
"""
number = int(input('Введите количество арбузов: '))
mass_max = 0
mass_min = 1000
count = 1
while count <= number:
    print(f'Введите вес {count} арбуза в кг :')
    mass = int(input())
    if mass < mass_min:
        mass_min = mass
    if mass > mass_max:
        mass_max = mass
    count += 1
print(f'Самый лёгкий арбуз весит {mass_min}кг, самый тяжелый арбуз весит {mass_max}кг')


#lst = [5, 1, 6, 5, 9]
lst = list(map(int, input('Введите массы арбузов через пробел').split())) # map применяет int к каждому элементу массива
print(f'Тяжелый арбуз весит {max(lst)}, лёгкий арбуз {min(lst)}')
"""
"""
Найти чётные элементы списка
"""
#numbers = [10, 20, 25, 30, 35]
#for elements in numbers: # Обходим все элементы
#    if elements % 2 == 0:
#        print(f'{elements} - чётное')
#    else:
#        print(f'{elements} - не чётное')
"""
#for i in range(len(numbers)): # Начинаем с 1 элемента
for i in range(1, len(numbers)): # Начинаем со 2 элемента
    if numbers[i] % 2 == 0:
        print(f'{numbers[i]} - чётное')
    else:
        print(f'{numbers[i]} - не чётное')
"""
"""
count = 0
while count < len(numbers):
    if numbers[count] % 2 == 0:
        print(f'{numbers[count]} - чётное')
    else:
        print(f'{numbers[count]} - не чётное')
    count += 1
"""
"""
ДОМАШКА:

Задача 1:
На столе лежат n монеток. 
Некоторые из монеток лежат вверх решкой, а некоторые – гербом. 
Ваша задача - определить минимальное количество монеток, которые нужно перевернуть, 
чтобы все монетки лежали одной и той же стороной вверх.

Входные данные:
На вход программе подается список coins, где coins[i] равно 0, если i-я монетка лежит гербом вверх, 
и равно 1, если i-я монетка лежит решкой вверх. 
Размер списка не превышает 1000 элементов.

Выходные данные:
Программа должна вывести одно целое число - минимальное количество монеток, 
которые нужно перевернуть.
"""
#coins = [1, 1, 1, 1, 1, 1]
#i = 0
#j = 0
#for elements in coins:
#    if elements == 0:
#        i += 1
#    else:
#        j += 1
#if i <= j:
#    print(i)
#else:
#    print(j)

"""
Задача 2:
Петя и Катя – брат и сестра. 
Петя – студент, а Катя – школьница. 
Петя помогает Кате по математике.
Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. 
Для этого Петя делает две подсказки. 
Он называет сумму этих чисел S и их произведение P. 
Помогите Кате отгадать задуманные Петей числа.
Примечание: числа S и P задавать не нужно, они будут передаваться в тестах. 
В результате вы должны вывести все возможные пары чисел X и Y через пробел, такие что X <= Y.
"""
#s = int(input('Введите сумму:'))
#p = int(input('Введите произведение:'))
"""
d = s ** 2 - 4 * p
if d < 0:
    print('Решения нет')
elif d == 0:
    x = int(s / 2)
    y = s - x
    if x <= y:
        print(x, y)
    else:
        print(y, x)
else:
    x1 = int((s + d ** 0.5) / 2)
    y1 = s - x1
    if x1 <= y1:
        print(x1, y1)
    else:
        print(y1, x1)
    #x2 = int((s - d ** 0.5) / 2)
    #y2 = s - x2
    #if x2 <= y2:
    #    print(x2, y2)
    #else:
    #    print(y2, x2)
    """
# РЕШЕНИЕ ИЗ ЭТАЛОНА АВТОТЕСТА
"""
solutions = []
for i in range(1, 1001):
    for j in range(1, 1001):
        if s == i + j and p == i * j:
            solutions.append((min(i, j), max(i, j)))
solutions = list(set(solutions))

for solution in solutions:
    print(solution[0], solution[1])
"""

"""
Задача 3:
Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числаN
"""
n = int(input('Введите N:'))
#result = 0
#i = 0
#while result < n:
#    result = 2 ** i
#    if result <= n:
#        print(result)
#    i += 1
# РЕШЕНИЕ ИЗ ЭТАЛОНА
i = 0
while 2 ** i <= n:
    print(2 ** i)
    i += 1

















