# #  Google Colab(Jupyter). Знакомствос аналитикой.
# '''
# ● Чтение и предварительный просмотр данных
# ● Выбор данных
# ● Простая статистика
# ● Изображаем статистические отношения
# ● Линейные графики
# ● Гистограмма
# '''
# #  EDA(ExploratoryDataAnalysis)-Разведочныйанализ данных.
# '''
# Он состоит в анализе основных свойств данных,
# нахождения в них общих закономерностей, распределений и аномалий, построение начальных моделей,
# зачастую с использованием инструментов визуализации.
# Цели:
# 1. Максимальное «проникновение» в данные
# 2. Выявление основных структур
# 3. Выбор наиболее важных переменных
# 4. Обнаружение отклонений и аномалий 5. Проверка основных гипотез
# '''
# #  Термины:
# '''
# Перцентиль -
# это показатель, используемый в статистике,
# показывающий значение,ниже которого падает определенный процент наблюдений в группе наблюдений.
#
# Scatterplot (Точечный график) -
# Математическая диаграмма,
# изображающая значения двух переменных в виде точек на декартовой плоскости.
#
# Медиана набора чисел —
# число, которое находится в середине этого набора,
# если его упорядочить по возрастанию,
# то есть такое число, что половина из элементов набора не меньше него,
# а другая половина не больше.
# '''
# #  Библиотека pandas
# #  может читать многие форматы, включая:.csv,.xslx,.xls,.txt,sql и другие.
# #  Полный список по ссылке https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html
#
# '''
# Google Colab — сервис, который предоставляет возможность работать с кодом на языке Python
# через Jupyter Notebook, не устанавливая на свой компьютер дополнительных программ.
# В Google Colab можно применять различные библиотеки на Python,
# загружать и запускать файлы, анализировать данные и получать результаты в браузере.
# '''
# '''
# Google Колаборатория
# Colab — это размещенный сервис Jupyter Notebook,
# который не требует настройки и предоставляет бесплатный доступ к вычислительным ресурсам,
# включая графические процессоры и TPU.
# Colab особенно хорошо подходит для машинного обучения, науки о данных и образования
#
# Ссылка: https://colab.google/
# '''
#
#
# import pandas as pd  # as (alias)-псевдоним. Можем сократить название библиотеки до2-хбукв.
#
# t_name = pd.read_csv('sample_data/california_housing_train.csv') # Файл есть в Google Colab.
# # Если sep = ';' - разделитель по умолчанию - можно не указывать
#
# t_name.head() #  Вывод первых элементов. По умолчанию 5
# t_name.head(n = 10)  # первые 10  Можно df.head(10)
#
# t_name.tail()  #  Вывод последних элементов. По умолчанию 5
# t_name.tail(n = 10)  # последние 10 Можно df.tail(10)
#
# t_name.shape # Количество строк и столбцов
#
# t_name.isnull()  # Выводит True для пустых значений
#
# t_name.isnull().sum()  # Выводит количество пустых значений по столбцам
#
# t_name.dtypes  # Выводит тип данных по столбцам
#
# t_name.columns  # Выводит список названий всех столбцов
#
#
# # ВЫБОРКА ДАННЫХ
#
# # Вывести 1 столбец на экран по его названию
# t_name['latitude']
#
# # Вывести несколько столбцов
# t_name[['latitude','population']]
#
# # Вывести столбец total_rooms,у которого медианный возраст здания (housing_median_age) меньше 20:
#
# t_name[t_name['housing_median_age'] < 20]  # Все столбцы и строки у которых housing_median_age < 20
# t_name[t_name['housing_median_age'] < 20]['total_rooms']  # Столбец total_rooms,со строками housing_median_age < 20
#
# # Вывод по нескольким условиям:
# '''
# # & - выполнение одновременно всех условий. | - выполнение хотя бы одного условия.
# '''
# t_name[(t_name['housing_median_age'] > 20) & (t_name['total_rooms'] > 2000)] # Все столбцы
#
# t_name[(t_name['housing_median_age'] > 20) & (t_name['total_rooms'] > 2000)]['population']  # # Cтолбец population
#
# t_name[(t_name['housing_median_age'] > 20) & (t_name['total_rooms'] > 2000) & (t_name['population'] > 3000)][['population', 'median_house_value']]
#
#
# # ПРОСТАЯ СТАТИСТИКА
# '''
# Pandas позволяет получить основные простые данные для описательной статистики.
# Напр минимальное значение в столбце, максимальное значение, сумма всех значений,среднее значение
# '''
# # Максимальное значение:
# print(t_name['population'].max())
#
# # Минимальное значение:
# print(t_name['population'].min())
#
# # Среднее значение:
# print(t_name['population'].mean())
#
# # Сумма:
# print(t_name['population'].sum())

# Общая статистика:
'''.describe()
count-Общеекол-вонепустыхстрок
mean-среднеезначениевстолбце
std-стандартноеотклонениеотсреднегозначения
min-минимальноезначение max-максимальноезначение
Числа25%,50%,75%-перцентили '''
# print(t_name.describe())

# ГРАФИКИ:

# Seaborn — это библиотека для создания статистических графиков на Python

import seaborn as sns

# Точечный график (Scatterplot):

sns.scatterplot(data=t_name,x="longitude",y="latitude")

# Третий параметр hue="total_rooms" отразится на отдельном окне и цветом точек в графике
sns.scatterplot(data=t_name,x="households",y="population", hue="total_rooms")

# Размер точек (size):
sns.scatterplot(data=t_name,x="households",y="population", hue="total_rooms", size=10)

# Визуализировать сразу несколько отношений: класс PairGrid внутри seaborn.
# PairGrid визуализирует все возможные отношения, в соответствии с выбранным типом графика.

cols = ['population', 'median_income', 'housing_median_age', 'median_house_value'] # Выбираем колонки
g = sns.PairGrid(t_name[cols]) # Приминяем PairGrid
g.map(sns.scatterplot)

# ЛИНЕЙНЫЕ ГРАФИКИ

# Для генерации линейных графиков в seaborn используется relplot функцию. x,y-столбцы.
# Для линейных графиков ыбирается тип line:

sns.relplot(x="latitude",y="median_house_value",kind="line",data=t_name)

# ГИСТОГРАММЫ:
'''Cтолбчатые диаграммы. 
По оси x обычно указывают значение, 
по оси y - встречаемость (кол-во значений в выборке)'''
sns.histplot(data=t_name,x="median_income")

# Разбить возрастные группы на 3 категории до 20 лет, от 20 до 50 от 50.
# Функция .loc используется для получения группы строк и столбцов по меткам или логическому массиву в DataFrame
t_name.loc[df['housing_median_age']<=20,'age_group']='Молодые'
t_name.loc[(df['housing_median_age'] > 20) & (df['housing_median_age'] <= 50), 'age_group']='Ср.возраст'
t_name.loc[df['housing_median_age']>50,'age_group']='Пожилые'
# В таблице появился новый столбец 'age_group'

# .groupby() используется для разделения и выделения некоторой части данных
# из всего набора данных на основе определенных предопределенных условий или параметров.

df.groupby('age_group')['median_income'].mean().plot(kind='bar') # Медианный дохолд по возростным группам

# Поделим группы на 2: медианный доход выше 6 - 'rich' и ниже 6 - 'everyone_else'
df.loc[df['median_income']>6,'income_group']='rich'
df.loc[df['median_income']<6,'income_group']='everyone_else'

# Изобразим дополнительное измерение с помощью оттенка в виде возрастных групп и групп по доходам
sns.displot(df,x="median_house_value",hue="income_group")
